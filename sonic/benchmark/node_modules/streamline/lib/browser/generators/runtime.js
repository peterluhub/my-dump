(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
"use strict";

// Do not use this one directly, require it through the flows module.
module.exports = function funnel(max) {
	max = max == null ? -1 : max;
	if (max === 0) max = module.exports.defaultSize;
	if (typeof max !== "number") throw new Error("bad max number: " + max);
	var queue = [],
		active = 0,
		closed = false;

	var fun = function(callback, fn) {
			if (callback == null) return future(fun, arguments, 0);
			//console.log("FUNNEL: active=" + active + ", queued=" + queue.length);
			if (max < 0 || max === Infinity) return fn(callback);

			queue.push({
				fn: fn,
				cb: callback
			});

			function _doOne() {
				var current = queue.splice(0, 1)[0];
				if (!current.cb) return current.fn();
				active++;
				current.fn(function(err, result) {
					active--;
					if (!closed) {
						current.cb(err, result);
						while (active < max && queue.length > 0) _doOne();
					}
				});
			}

			while (active < max && queue.length > 0) _doOne();
		};

	fun.close = function() {
		queue = [];
		closed = true;
	};
	return fun;
};
module.exports.defaultSize = 4;
},{}],3:[function(require,module,exports){
"use strict";

var util = require('./util');

module.exports = function(file, line, object, property, index) {
	var bound = typeof property !== "function";
	var fn = bound ? object[property] : property;
	var self = bound ? object : this;
	if (typeof fn !== "function") throw new Error("cannot create future", "function", fn);
	return function futured() {
		var err, result, done, q = [];
		var args = Array.prototype.slice.call(arguments);
		var callback = function(e, r) {
			//if (e) console.error(e);
			err = e;
			result = r;
			done = true;
			q && q.forEach(function(f) {
				if (sync) {
					setImmediate(function() {
						f.call(self, e, r);
					});
				} else {
					f.call(self, e, r);					
				}
			});
			q = null;
		};
		args[index] = callback; 
		var sync = true;
		fn.apply(self, args);
		sync = false;
		var future = function(cb) {
			if (typeof cb !== "function") throw argError(fn.name, index, "function", cb);
			if (done) {
				cb.call(self, err, result);
			}
			else q.push(cb);
		};
		// computed property so that we don't allocate promise if we don't need to
		Object.defineProperty(future, 'promise', {
			get: function() {
				return new Promise(function(resolve, reject) {
					if (done) {
						if (err) reject(err);
						else resolve(result);
					} else {
						q.push(function(e, r) {
							if (e) reject(e);
							else resolve(r);
						})
					}
				});
			}
		});
		return future;
	};
}

},{"./util":6}],4:[function(require,module,exports){
var _streamline = typeof require === "function" ? require("streamline-runtime/lib/generators/runtime") : Streamline.require("streamline-runtime/lib/generators/runtime");

var _filename = "builtins._js";
/**
 * Copyright (c) 2012 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */
/// !doc
///
/// # Streamline built-ins

(function (exports) {
	var _parallel = function _parallel(options) {
		if (typeof options === "number") return options;
		if (typeof options.parallel === "number") return options.parallel;
		return options.parallel ? -1 : 1;
	};

	"use strict";
	var VERSION = 3;

	var future = function (fn, args, i) {
		var err,
		    result,
		    done,
		    q = [],
		    self = this;
		args = Array.prototype.slice.call(args);
		args[i] = function (e, r) {
			err = e;
			result = r;
			done = true;
			q && q.forEach(function (f) {
				f.call(self, e, r);
			});
			q = null;
		};
		fn.apply(this, args);
		return function F(cb) {
			if (!cb) return F;
			if (done) cb.call(self, err, result);else q.push(cb);
		};
	};

	var funnel = require('../funnel');

	if (Array.prototype.forEach_ && Array.prototype.forEach_.version_ >= VERSION) return;

	// bail out (silently) if JS does not support defineProperty (IE 8).
	try {
		Object.defineProperty({}, 'x', {});
	} catch (e) {
		return;
	}

	var has = Object.prototype.hasOwnProperty;

	/* eslint-disable no-extend-native */

	/// ## Array functions 
	///
	/// These functions are asynchronous variants of the EcmaScript 5 Array functions.
	///
	/// Common Rules:
	///
	/// These variants are postfixed by an underscore. 
	/// They take the `_` callback as first parameter. 
	/// They pass the `_` callback as first argument to their `fn` callback. 
	/// Most of them have an optional `options` second parameter which controls the level of
	/// parallelism. This `options` parameter may be specified either as `{ parallel: par }`
	/// where `par` is an integer, or directly as a `par` integer value. 
	/// The `par` values are interpreted as follows:
	///
	/// * If absent or equal to 1, execution is sequential.
	/// * If > 1, at most `par` operations are parallelized.
	/// * if 0, a default number of operations are parallelized.
	///   This default is defined by `flows.funnel.defaultSize` (4 by default - see `flows` module).
	/// * If < 0 or Infinity, operations are fully parallelized (no limit).
	///
	/// Functions:
	///
	/// * `array.forEach_(_[, options], fn[, thisObj])` 
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.forEach_;
	Object.defineProperty(Array.prototype, 'forEach_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async(function* _$$value$$(_, options, fn, thisObj) {
			{
				if (typeof options === "function") {
						thisObj = fn;
						fn = options;
						options = 1;
					}
				var par = _parallel(options);
				thisObj = thisObj !== undefined ? thisObj : this;
				var len = this.length;
				if (par === 1 || len <= 1) {
						for (var i = 0; i < len; i++) {
							if (has.call(this, i)) yield _streamline.await(_filename, 95, fn, "call", 1, null, false)(thisObj, true, this[i], i, this);
						}
					} else {
						yield _streamline.await(_filename, 98, this, "map_", 0, null, false)(true, par, fn, thisObj);
					}
				return this;
			}
		}, 0, 4)
	});
	Array.prototype.forEach_.version_ = VERSION;
	/// * `result = array.map_(_[, options], fn[, thisObj])` 
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.map_;
	Object.defineProperty(Array.prototype, 'map_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async(function* _$$value$$2(_, options, fn, thisObj) {
			{
				if (typeof options === "function") {
						thisObj = fn;
						fn = options;
						options = 1;
					}
				var par = _parallel(options);
				thisObj = thisObj !== undefined ? thisObj : this;
				var len = this.length;
				var result, i;
				if (par === 1 || len <= 1) {
						result = new Array(len);
						for (i = 0; i < len; i++) {
							if (has.call(this, i)) result[i] = yield _streamline.await(_filename, 124, fn, "call", 1, null, false)(thisObj, true, this[i], i, this);
						}
					} else {
						var fun = funnel(par);
						result = this.map(function (elt, i, arr) {
							return _streamline.future(_filename, 129, null, fun, 0, null, false)(false, _streamline.async(function* _$$$$(_) {
								{
									return yield _streamline.await(_filename, 130, fn, "call", 1, null, false)(thisObj, true, elt, i, arr);
								}
							}, 0, 1));
						});
						for (i = 0; i < len; i++) {
							if (has.call(this, i)) result[i] = yield _streamline.await(_filename, 134, result, i, 0, null, false)(true);
						}
					}
				return result;
			}
		}, 0, 4)
	});
	/// * `result = array.filter_(_[, options], fn[, thisObj])` 
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.filter_;
	Object.defineProperty(Array.prototype, 'filter_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async(function* _$$value$$3(_, options, fn, thisObj) {
			{
				if (typeof options === "function") {
						thisObj = fn;
						fn = options;
						options = 1;
					}
				var par = _parallel(options);
				thisObj = thisObj !== undefined ? thisObj : this;
				var result = [];
				var len = this.length;
				if (par === 1 || len <= 1) {
						for (var i = 0; i < len; i++) {
							if (has.call(this, i)) {
									var elt = this[i];
									if (yield _streamline.await(_filename, 161, fn, "call", 1, null, false)(thisObj, true, elt, i, this)) result.push(elt);
								}
						}
					} else {
						yield _streamline.await(_filename, 165, this, "map_", 0, null, false)(true, par, _streamline.async(function* _$$$$2(_, elt, i, arr) {
							{
								if (yield _streamline.await(_filename, 166, fn, "call", 1, null, false)(thisObj, true, elt, i, arr)) result.push(elt);
							}
						}, 0, 4), thisObj);
					}
				return result;
			}
		}, 0, 4)
	});
	/// * `bool = array.every_(_[, options], fn[, thisObj])` 
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.every_;
	Object.defineProperty(Array.prototype, 'every_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async(function* _$$value$$4(_, options, fn, thisObj) {
			{
				if (typeof options === "function") {
						thisObj = fn;
						fn = options;
						options = 1;
					}
				var par = _parallel(options);
				thisObj = thisObj !== undefined ? thisObj : this;
				var len = this.length,
				    i;
				if (par === 1 || len <= 1) {
						for (i = 0; i < len; i++) {

							if (has.call(this, i) && !(yield _streamline.await(_filename, 191, fn, "call", 1, null, false)(thisObj, true, this[i], i, this))) return false;
						}
					} else {
						var fun = funnel(par);
						var futures = this.map(function (elt, i, arr) {
							return _streamline.future(_filename, 196, null, fun, 0, null, false)(false, _streamline.async(function* _$$$$3(_) {
								{
									return yield _streamline.await(_filename, 197, fn, "call", 1, null, false)(thisObj, true, elt, i, arr);
								}
							}, 0, 1));
						});
						for (i = 0; i < len; i++) {
							if (has.call(this, i) && !(yield _streamline.await(_filename, 201, futures, i, 0, null, false)(true))) {
									fun.close();
									return false;
								}
						}
					}
				return true;
			}
		}, 0, 4)
	});
	/// * `bool = array.some_(_[, options], fn[, thisObj])` 
	///   `fn` is called as `fn(_, elt, i, array)`.
	delete Array.prototype.some_;
	Object.defineProperty(Array.prototype, 'some_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async(function* _$$value$$5(_, options, fn, thisObj) {
			{
				if (typeof options === "function") {
						thisObj = fn;
						fn = options;
						options = 1;
					}
				var par = _parallel(options);
				thisObj = thisObj !== undefined ? thisObj : this;
				var len = this.length,
				    i;
				if (par === 1 || len <= 1) {
						for (i = 0; i < len; i++) {
							if (has.call(this, i) && (yield _streamline.await(_filename, 228, fn, "call", 1, null, false)(thisObj, true, this[i], i, this))) return true;
						}
					} else {
						var fun = funnel(par);
						var futures = this.map(function (elt, i, arr) {
							return _streamline.future(_filename, 233, null, fun, 0, null, false)(false, _streamline.async(function* _$$$$4(_) {
								{
									return yield _streamline.await(_filename, 234, fn, "call", 1, null, false)(thisObj, true, elt, i, arr);
								}
							}, 0, 1));
						});
						for (i = 0; i < len; i++) {
							if (has.call(this, i) && (yield _streamline.await(_filename, 238, futures, i, 0, null, false)(true))) {
									fun.close();
									return true;
								}
						}
					}
				return false;
			}
		}, 0, 4)
	});
	/// * `result = array.reduce_(_, fn, val[, thisObj])` 
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	delete Array.prototype.reduce_;
	Object.defineProperty(Array.prototype, 'reduce_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async(function* _$$value$$6(_, fn, v, thisObj) {
			{
				thisObj = thisObj !== undefined ? thisObj : this;
				var len = this.length;
				for (var i = 0; i < len; i++) {
					if (has.call(this, i)) v = yield _streamline.await(_filename, 258, fn, "call", 1, null, false)(thisObj, true, v, this[i], i, this);
				}
				return v;
			}
		}, 0, 4)
	});
	/// * `result = array.reduceRight_(_, fn, val[, thisObj])` 
	///   `fn` is called as `val = fn(_, val, elt, i, array)`.
	delete Array.prototype.reduceRight_;
	Object.defineProperty(Array.prototype, 'reduceRight_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async(function* _$$value$$7(_, fn, v, thisObj) {
			{
				thisObj = thisObj !== undefined ? thisObj : this;
				var len = this.length;
				for (var i = len - 1; i >= 0; i--) {
					if (has.call(this, i)) v = yield _streamline.await(_filename, 274, fn, "call", 1, null, false)(thisObj, true, v, this[i], i, this);
				}
				return v;
			}
		}, 0, 4)
	});

	/// * `array = array.sort_(_, compare [, beg [, end]])` 
	///   `compare` is called as `cmp = compare(_, elt1, elt2)`. 
	///   Note: this function _changes_ the original array (and returns it).
	delete Array.prototype.sort_;
	Object.defineProperty(Array.prototype, 'sort_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: _streamline.async(function* _$$value$$8(_, compare, beg, end) {
			{
				var _qsort = _streamline.async(function* _$$_qsort$$(_, beg, end) {
					{
						if (beg >= end) return;

						var tmp;
						if (end === beg + 1) {
								if ((yield _streamline.await(_filename, 298, null, compare, 0, null, false)(true, array[beg], array[end])) > 0) {
										tmp = array[beg];
										array[beg] = array[end];
										array[end] = tmp;
									}
								return;
							}

						var mid = Math.floor((beg + end) / 2);
						var o = array[mid];
						var nbeg = beg;
						var nend = end;

						while (nbeg <= nend) {
							while (nbeg < end && (yield _streamline.await(_filename, 312, null, compare, 0, null, false)(true, array[nbeg], o)) < 0) nbeg++;
							while (beg < nend && (yield _streamline.await(_filename, 313, null, compare, 0, null, false)(true, o, array[nend])) < 0) nend--;

							if (nbeg <= nend) {
									tmp = array[nbeg];
									array[nbeg] = array[nend];
									array[nend] = tmp;
									nbeg++;
									nend--;
								}
						}

						if (nbeg < end) yield _streamline.await(_filename, 324, null, _qsort, 0, null, false)(true, nbeg, end);
						if (beg < nend) yield _streamline.await(_filename, 325, null, _qsort, 0, null, false)(true, beg, nend);
					}
				}, 0, 3);

				var array = this;
				beg = beg || 0;
				end = end == null ? array.length - 1 : end;

				yield _streamline.await(_filename, 327, null, _qsort, 0, null, false)(true, beg, end);
				return array;
			}
		}, 0, 4)
	});

	///
	/// ## Function functions 
	///
	/// * `result = fn.apply_(_, thisObj, args[, index])` 
	///   Helper to use `Function.prototype.apply` inside streamlined functions. 
	///   Equivalent to `result = fn.apply(thisObj, argsWith_)` where `argsWith_` is
	///   a modified `args` in which the callback has been inserted at `index`
	///   (at the end of the argument list if `index` is omitted or negative).
	delete Function.prototype.apply_;
	Object.defineProperty(Function.prototype, 'apply_', {
		configurable: true,
		writable: true,
		enumerable: false,
		value: function (callback, thisObj, args, index) {
			args = Array.prototype.slice.call(args, 0);
			args.splice(index != null && index >= 0 ? index : args.length, 0, callback);
			return this.apply(thisObj, args);
		}
	});
})(typeof exports !== 'undefined' ? exports : Streamline.builtins = Streamline.builtins || {});
///
},{"../funnel":2,"streamline-runtime/lib/generators/runtime":5}],5:[function(require,module,exports){
"use strict";
/**
 * Copyright (c) 2013 Bruno Jouhier <bruno.jouhier@sage.com>
 * MIT License
 */
var util = require('../util');
var glob = util.getGlobals('generators');

var counters = {
	slowAwait: 0,
	fastAwait: 0,
};

function makeArgs(i) {
	if (i <= 0) return "";
	return i > 1 ? makeArgs(i - 1) + ', a' + i : "a1";
}

if (typeof glob.yielded === "undefined") glob.yielded = true;
glob.PENDING = glob.PENDING || {};

function isGenerator(val) {
	return val && (
	Object.prototype.toString.call(val) === "[object Generator]" || val.toString() === "[object Generator]");
}

function Frame(file, line, fn) {
	this.fn = fn;
	this.file = file || "unknown";
	this.line = line || 0;
}

Object.defineProperty(Frame.prototype, "name", {
	get: function() {
		var fn = this.fn;
		return (fn && (fn.__name__ || fn.name)) || "unknown";
	}
});

Object.defineProperty(Frame.prototype, "info", {
	get: function() {
		return this;
	}
});

function pushFrame(g) {
	if (glob.emitter) glob.emitter.emit('enter', g.frame);
	g.frame = g.frame || glob.frame;
	glob.frame = null;
}

function popFrame(g) {
	if (glob.emitter) glob.emitter.emit('exit', g.frame);
}

function run(fn, g, cb, options) {
	var rsm = glob.resume;
	var emit = function(ev, g) {
			if (glob.emitter) glob.emitter.emit(ev, g.frame);
		}

	try {
		if (glob.frame) {
			g.frame = glob.frame;
			g.frame.g = g;
			glob.frame = null;
		} else {
			g.frame = new Frame("", 0, fn);
		}

		glob.resume = function(err, val) {
			if (glob.yielded) {
				emit("resume", g);
				glob.yielded = false;
			}
			while (g) {
				if (options && options.interrupt && options.interrupt()) return;
				try {
					// ES6 is deprecating send in favor of next. Following line makes us compatible with both.
					var send = g.send || g.next;
					var v = err ? g.
					throw (err) : send.call(g, val);
					val = v.value;
					err = null;
					// if we get PENDING, the current call completed with a pending I/O
					// resume will be called again when the I/O completes. So just save the context and return here.
					if (val === glob.PENDING) {
						if (!glob.yielded) {
							emit("yield", g);
							glob.yielded = true;
						}
						return;
					}
					// if we get [PENDING, e, r], the current call invoked its callback synchronously
					// we just loop to send/throw what the callback gave us.
					if (val && val[0] === glob.PENDING) {
						err = val[1];
						val = val[2];
						if (err) err = wrapError(err, g);
					}
					// else, if g is done we unwind it we send val to the parent generator (or through cb if we are at the top)
					else if (v.done) {
						//g.close();
						popFrame(g);
						g = g.prev;
					}
					// else if val is not a generator we have an error. Yield was not applied to a generators
					else {
						if (!isGenerator(val)) {
							throw new Error("invalid value was yielded. Expected a generator, got " + val);
						}
						// we got a new generator which means that g called another generator function
						// the new generator become current and we loop with g.send(undefined) (equiv to g.next()) 
						val.prev = g;
						g = val;
						pushFrame(g);
						val = undefined;
					}
				} catch (ex) {
					// the send/throw call failed.
					// we unwind the current generator and we rethrow into the parent generator (or through cb if at the top)
					//g.close();
					err = wrapError(ex, g);
					popFrame(g);
					g = g.prev;
					val = undefined;
				}
			}
			// we have exhausted the stack of generators. 
			// return the result or error through the callback.
			cb(err, val);
		}

		// start the resume loop
		glob.resume();
	} finally {
		// restore resume global
		glob.resume = rsm;
	}
}

function mapResults(options, args) {
	if (options && typeof options === "object") {
		if (options.returnArray) return args;
		if (options.returnObject) return options.returnObject.reduce(function(res, key, i) {
			res[key] = args[i];
			return res;
		}, {});
	}
	return args[0];
}

function invoke(that, fn, args, index, index2, returnArray) {
	// Set things up so that call returns:
	// * PENDING if it completes with a pending I/O (and cb will be called later)
	// * [PENDING, e, r] if the callback is called synchronously.
	var result = glob.PENDING,
		sync = true;
	var rsm = glob.resume;

	// convert args to array so that args.length gets correctly set if index is args.length
	args = Array.prototype.slice.call(args, 0);
	var cx = glob.context;
	var callback = function(e, r) {
			var oldContext = glob.context;
			var oldResume = glob.resume;
			try {
				if (returnArray) r = Array.prototype.slice.call(arguments, 1);
				glob.context = cx;
				glob.resume = rsm;
				if (sync) {
					result = [glob.PENDING, e, r];
				} else {
					glob.resume(e, r);
				}
			} finally {
				glob.context = oldContext;
				glob.resume = oldResume;
			}
		}
	if (index2 != null) {
		args[index] = function(r) {
			callback(null, r);
		}
		args[index2] = function(e) {
			callback(e);
		}
	} else {
		args[index] = callback;
	}
	fn.apply(that, args);
	sync = false;
	return result;
}

var star = function(fn, index, index2, returnArray) {
	return function *() {
		return (yield invoke(this, fn, arguments, index, index2, returnArray));
	};
}

var unstarTemplate = function(fn, options) {
		var index = (options && typeof options === 'object') ? options.callbackIndex : options;
		if (index == null) index = fn.length;

		var F = function F() {
			var cb = arguments[index];
			if (typeof cb !== "function") {
				if (glob.allowBooleanPlaceholders && typeof cb === 'boolean') {
					if (cb) cb = util.defaultCallback;
					else return exports.future("", 0, null, wrapper.bind(this), index)(arguments);
				}
				else throw util.argError(fn.name, index, "function", typeof cb);
			}
			var g = fn.apply(this, arguments);
			run.call(this, fn, g, cb);
		};
		// track the original name for stack frames
		F.__name__ = fn.name;
		return F;
	}

var unstarBody = unstarTemplate.toString();
unstarBody = unstarBody.substring(unstarBody.indexOf('{'));
var unstarrors = [];

function makeUnstarror(i) {
	return eval("(function(fn, options)" + unstarBody.replace(/function\s*F\(\)/, "function F(" + makeArgs(i) + ")") + ")");
}

function unstar(fn, index, arity) {
	var i = arity != null ? arity : (index == null ? fn.length + 1 : fn.length);
	var unstarror = unstarrors[i] || (unstarrors[i] = makeUnstarror(i));
	return unstarror(fn, index);
}

function wrapError(err, g) {
	if (!(err instanceof Error)) return err; // handle throw "some string";
	for (var gg = err.g; gg; gg = gg.prev) {
		if (gg === g) return err;
	}
	err = Object.create(err);
	err.g = g;
	Object.defineProperty(err, 'stack', {
		get: function() {
			return stackTrace(this);
		}
	});
	return err;
}

function stackTrace(err) {
	var extra;
	function starredStack(e) {
		if (!e || !e.g) return "";
		var s = starredStack(Object.getPrototypeOf(e));
		for (var g = e.g; g.prev; g = g.prev) {
			var fname = g.prev.frame.name || "";
			var m = /\$\$(.*)\$\$/.exec(fname);
			if (m) fname = m[1];
			s += '    at ' + fname + ' (' + g.frame.file + ':' + g.frame.line + ')\n';
		}
		return s;
	}
	var rawStack = Object.getOwnPropertyDescriptor(new Error(), 'stack').get.call(err);
	var cut = rawStack.indexOf('    at GeneratorFunctionPrototype');
	if (cut < 0) cut = rawStack.indexOf('\n') + 1;
	var result = rawStack.substring(0, cut).replace(/\n.*regenerator.runtime.*/g, '') + //
	'    <<< yield stack >>>\n' + starredStack(err) + //
	'    <<< raw stack >>>\n' + rawStack.substring(cut);
	return result;
}

exports.await = function(file, line, object, property, index1, index2, returnArray) {
	var bound = typeof property !== "function";
	var fn = bound ? object[property] : property;
	glob.frame = new Frame(file, line, fn);
	var key = '';
	if (index2 == null && !returnArray) {
		key = 'starred-' + index1;
		var wrapper = fn[key];
		if (wrapper) {
			counters.fastAwait++;
			return bound ? wrapper.bind(object) : wrapper;
		}
	}
	counters.slowAwait++;
	if (typeof fn !== "function") throw util.typeError("cannot call", "function", fn);
	wrapper = star(fn, index1, index2, returnArray);
	if (!bound && key) {
		fn[key] = wrapper;
	}
	return bound ? wrapper.bind(object) : wrapper;
};

exports.async = function(fn, index, arity) {
	if (typeof fn !== "function") throw util.typeError("cannot wrap function", "function", fn);
	var unstarred = unstar(fn, index, arity);
	unstarred["starred-" + index] = fn;
	return unstarred;
}

exports.new = function(file, line, constructor, index) {
	if (typeof constructor !== "function") throw util.typeError("cannot instantiate", "function", constructor);
	glob.frame = new Frame(file, line, constructor);
	var starred = star(constructor, index);
	return function *() {
		var that = Object.create(constructor.prototype);
		yield starred.apply(that, arguments);
		return that;
	};
};

exports.future = require('../future');
require('./builtins');
},{"../future":3,"../util":6,"./builtins":4}],6:[function(require,module,exports){
(function (process,global){
"use strict";
// colors package does not work in browser - fails on reference to node's `process` global
var idem = function(x) { return x; };
var colors;
if (typeof(process) !== 'undefined' && !process.browser) {
	try {
		colors = require(idem('colors'));
	} catch (ex) {
		// console.error(ex.stack);
	}
}
if (!colors) colors = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'gray'].reduce(function(r, c) {
	r[c] = idem;
	return r;
}, {});

function log(message) {
	console.error(colors.gray("[STREAMLINE-RUNTIME] " + message));
}
function warn(message) {
	console.error(colors.magenta("[STREAMLINE-RUNTIME] " + message));
}
function error(message) {
	console.error(colors.red("[STREAMLINE-RUNTIME] " + message));
}

function trace(obj) {
	if (obj instanceof TypeError) util.error(obj.stack);
	//else console.error(obj);
};

function typeName(val) {
	return val === null ? "null" : typeof val;
}

function typeError(message, expected, got) {
	var err = new TypeError(message + ": expected " + expected + ", got " + typeName(got));
	console.error(err.stack);
	throw err;
}

function argError(fname, index, expected, got) {
	return typeError("invalid argument " + index + " to function `" + fname + "`", expected, got);
}

function getGlobals(runtime) {
	var glob = typeof global === "object" ? global : window;
	var secret = "_20c7abceb95c4eb88b7ca1895b1170d1";
	var g = (glob[secret] = (glob[secret] || { context: {} }));
	if (runtime && g.runtime !== runtime) {
		if (g.runtime) console.warn("[STREAMLINE-RUNTIME] " + runtime + " runtime loaded on top of " + g.runtime);
		else g.runtime = runtime;
	}
	return g;
}

function defaultCallback(err) {
	if (err) throw err;
}

// fix names in stack traces
var origPrepareStackTrace = Error.prepareStackTrace;
if (origPrepareStackTrace) Error.prepareStackTrace = function (_, stack) { 
	// eval stack frames from streamline-runtime fibers are botched: column number is 0, 
	// which causes an error in source-map-support.js / mapEvalOrigin.
	// So we filter them out.
	stack = stack.filter(function(frame) {
		var origin = frame.isEval() && frame.getEvalOrigin();
		return (!(origin && /\bstreamline-runtime\b/.test(origin)));
	});
	var result;
	try {
		result = origPrepareStackTrace.call(this, _, stack);
	} catch (ex) {
		result = "\n*** STACKTRACE PREPARE FAILED: " + ex.message + " ***\n" + stack.join('\n');
	}
	result = result.replace(/_\$\$(.*)\$\$\d*/g, function(all, x) { return x; })
		.replace(/Function\.(.*) \[as awaitWrapper-0\]/g, function(all, x) { return x; });
	return result;
};

function defaultRuntime() {
	var _defRT;
	return _defRT || (_defRT = (function() {
		try {
			require(idem('fibers'));
			return 'fibers';
		} catch (ex) {}
		try {
			eval("(function*(){})");
			return 'generators';
		} catch (ex) {}
		return "callbacks";
	})());
}

module.exports = {
	log: log,
	warn: warn,
	error: error,
	trace: trace,
	typeName: typeName,
	typeError: typeError,
	argError: argError,
	getGlobals: getGlobals,
	defaultCallback: defaultCallback,
	defaultRuntime: defaultRuntime,
};
var util = module.exports;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":1}],7:[function(require,module,exports){
"use strict";
module.exports = require('streamline-runtime/lib/generators/runtime');

},{"streamline-runtime/lib/generators/runtime":5}]},{},[7]);
