"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _symbol = require("./symbol");

var _transforms = require("./transforms");

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ScopeApplyingReducer = function () {
  function ScopeApplyingReducer(scope, context) {
    var phase = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

    _classCallCheck(this, ScopeApplyingReducer);

    this.context = context;
    this.scope = scope;
    this.phase = phase;
  }

  _createClass(ScopeApplyingReducer, [{
    key: "transform",
    value: function transform(term) {
      var field = "transform" + term.type;
      if (typeof this[field] === 'function') {
        return this[field](term);
      }
      (0, _errors.assert)(false, "transform not implemented yet for: " + term.type);
    }
  }, {
    key: "transformFormalParameters",
    value: function transformFormalParameters(term) {
      var _this = this;

      var rest = term.rest == null ? null : this.transform(term.rest);
      return new _terms2.default('FormalParameters', {
        items: term.items.map(function (it) {
          return _this.transform(it);
        }),
        rest: rest
      });
    }
  }, {
    key: "transformBindingWithDefault",
    value: function transformBindingWithDefault(term) {
      return new _terms2.default('BindingWithDefault', {
        binding: this.transform(term.binding),
        init: term.init
      });
    }
  }, {
    key: "transformObjectBinding",
    value: function transformObjectBinding(term) {
      var _this2 = this;

      return new _terms2.default('ObjectBinding', {
        properties: term.properties.map(function (prop) {
          return _this2.transform(prop);
        })
      });
    }
  }, {
    key: "transformBindingPropertyIdentifier",
    value: function transformBindingPropertyIdentifier(term) {
      return new _terms2.default('BindingPropertyIdentifier', {
        binding: this.transform(term.binding),
        init: term.init
      });
    }
  }, {
    key: "transformBindingPropertyProperty",
    value: function transformBindingPropertyProperty(term) {
      return new _terms2.default('BindingPropertyProperty', {
        name: term.name,
        binding: this.transform(term.binding)
      });
    }
  }, {
    key: "transformArrayBinding",
    value: function transformArrayBinding(term) {
      var _this3 = this;

      return new _terms2.default('ArrayBinding', {
        elements: term.elements.map(function (el) {
          return _this3.transform(el);
        }),
        restElement: term.restElement == null ? null : this.transform(term.restElement)
      });
    }
  }, {
    key: "transformBindingIdentifier",
    value: function transformBindingIdentifier(term) {
      var name = term.name.addScope(this.scope, this.context.bindings);
      var newBinding = (0, _symbol.gensym)(name.val());

      this.context.env.set(newBinding.toString(), new _transforms.VarBindingTransform(name));
      this.context.bindings.add(name, {
        binding: newBinding,
        phase: this.phase,
        skipDup: true
      });

      return new _terms2.default("BindingIdentifier", { name: name });
    }
  }]);

  return ScopeApplyingReducer;
}();

exports.default = ScopeApplyingReducer;
//# sourceMappingURL=apply-scope-in-params-reducer.js.map
