var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var FileSelect = (function () {
    function FileSelect(element) {
        this.element = element;
    }
    FileSelect.prototype.getOptions = function () {
        return this.uploader.options;
    };
    FileSelect.prototype.getFilters = function () {
    };
    FileSelect.prototype.isEmptyAfterSelection = function () {
        return !!this.element.nativeElement.attributes.multiple;
    };
    FileSelect.prototype.onChange = function () {
        var files = this.element.nativeElement.files;
        var options = this.getOptions();
        var filters = this.getFilters();
        this.uploader.addToQueue(files, options, filters);
        if (this.isEmptyAfterSelection()) {
        }
    };
    FileSelect = __decorate([
        angular2_1.Directive({
            selector: '[ng2-file-select]',
            properties: ['uploader'],
            host: {
                '(change)': 'onChange()'
            }
        }), 
        __metadata('design:paramtypes', [angular2_1.ElementRef])
    ], FileSelect);
    return FileSelect;
})();
exports.FileSelect = FileSelect;
exports.fileUpload = [FileSelect];
//# sourceMappingURL=file-select.js.map